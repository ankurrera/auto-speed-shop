import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  CheckCircle,
  Clock,
  FileText,
  CreditCard,
  AlertCircle,
  Package,
  DollarSign,
  XCircle,
  Share
} from "lucide-react";
import { ORDER_STATUS, PAYMENT_STATUS } from "@/types/order";

interface TrackingStep {
  id: number;
  title: string;
  icon: React.ReactNode;
  status: 'completed' | 'current' | 'pending' | 'cancelled';
  statusText: string;
  description?: string;
}

interface TrackOrderTimelineProps {
  orderStatus: string;
  className?: string;
}

const TrackOrderTimeline: React.FC<TrackOrderTimelineProps> = ({ 
  orderStatus, 
  className = "" 
}) => {
  // Map order status to tracking steps
  const getTrackingSteps = (status: string): TrackingStep[] => {
    // Define different types of cancellation scenarios
    const isFullyCancelled = status === ORDER_STATUS.CANCELLED;
    const isInvoiceDeclined = status === ORDER_STATUS.INVOICE_DECLINED;
    const isPaymentFailed = status === PAYMENT_STATUS.FAILED;
    
    // For backwards compatibility, keep the general isCancelled flag for other statuses
    const isCancelled = isFullyCancelled;
    
    const steps: TrackingStep[] = [
      {
        id: 1,
        title: "Checkout Request Placed",
        icon: <Package className="h-5 w-5" />,
        status: 'completed',
        statusText: 'Completed',
        description: 'Your order request has been received'
      },
      {
        id: 2,
        title: "Invoice Generated by Admin",
        icon: <FileText className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.INVOICE_SENT, 
          ORDER_STATUS.INVOICE_ACCEPTED, 
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 2, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.INVOICE_SENT, 
          ORDER_STATUS.INVOICE_ACCEPTED, 
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 2, isInvoiceDeclined, isPaymentFailed),
        description: 'Admin is preparing your custom invoice'
      },
      {
        id: 3,
        title: "User Decision (Accepted / Declined)",
        icon: <AlertCircle className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.INVOICE_ACCEPTED, 
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, ORDER_STATUS.INVOICE_DECLINED, 3, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.INVOICE_ACCEPTED, 
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, ORDER_STATUS.INVOICE_DECLINED, 3, isInvoiceDeclined, isPaymentFailed),
        description: 'Review and accept or decline the invoice'
      },
      {
        id: 4,
        title: "PayPal Credentials Shared",
        icon: <Share className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 4, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED,
          ORDER_STATUS.PAYMENT_PENDING, 
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 4, isInvoiceDeclined, isPaymentFailed),
        description: 'Payment details and instructions provided'
      },
      {
        id: 5,
        title: "User Payment Submitted",
        icon: <CreditCard className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 5, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.PAYMENT_SUBMITTED, 
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 5, isInvoiceDeclined, isPaymentFailed),
        description: 'Your payment has been submitted for verification'
      },
      {
        id: 6,
        title: "Admin Payment Verification",
        icon: <CheckCircle className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, PAYMENT_STATUS.FAILED, 6, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.PAYMENT_VERIFIED, 
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, PAYMENT_STATUS.FAILED, 6, isInvoiceDeclined, isPaymentFailed),
        description: 'Admin is verifying your payment details'
      },
      {
        id: 7,
        title: "Order Confirmed",
        icon: <CheckCircle className="h-5 w-5" />,
        status: getStepStatus(status, [
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 7, isInvoiceDeclined, isPaymentFailed),
        statusText: getStepStatusText(status, [
          ORDER_STATUS.CONFIRMED, 
          ORDER_STATUS.SHIPPED, 
          ORDER_STATUS.DELIVERED
        ], isCancelled, undefined, 7, isInvoiceDeclined, isPaymentFailed),
        description: 'Your order is confirmed and will be processed'
      }
    ];

    return steps;
  };

  // Helper function to determine step status
  function getStepStatus(
    currentStatus: string, 
    completedStatuses: string[], 
    isCancelled: boolean, 
    declinedStatus?: string,
    stepId?: number,
    isInvoiceDeclined?: boolean,
    isPaymentFailed?: boolean
  ): 'completed' | 'current' | 'pending' | 'cancelled' {
    // Handle invoice declined scenario - steps 1 and 2 should remain completed
    if (isInvoiceDeclined && stepId) {
      if (stepId === 1) {
        // Step 1 is always completed when we reach invoice declined status
        return 'completed';
      } else if (stepId === 2) {
        // Step 2 is completed when invoice declined (invoice was generated before being declined)
        return 'completed';
      } else {
        // Steps 3 and beyond are cancelled when invoice is declined
        return 'cancelled';
      }
    }
    
    // Handle payment failed scenario - steps 1-5 should remain completed
    if (isPaymentFailed && stepId) {
      if (stepId === 1) {
        return 'completed';
      } else if (stepId <= 5 && completedStatuses.includes(currentStatus)) {
        return 'completed';
      } else if (stepId > 5) {
        // Steps 6 and beyond are cancelled when payment fails
        return 'cancelled';
      }
    }
    
    // Handle full cancellation (original logic)
    if (isCancelled) return 'cancelled';
    if (declinedStatus && currentStatus === declinedStatus) return 'cancelled';
    if (completedStatuses.includes(currentStatus)) return 'completed';
    
    // Check if this step should be current (next logical step)
    const stepsBefore = getStepsBeforeThisOne(completedStatuses);
    if (stepsBefore.includes(currentStatus)) return 'current';
    
    return 'pending';
  }

  // Helper function to get status text
  function getStepStatusText(
    currentStatus: string, 
    completedStatuses: string[], 
    isCancelled: boolean, 
    declinedStatus?: string,
    stepId?: number,
    isInvoiceDeclined?: boolean,
    isPaymentFailed?: boolean
  ): string {
    // Handle invoice declined scenario - steps 1 and 2 should remain completed
    if (isInvoiceDeclined && stepId) {
      if (stepId === 1) {
        return 'Completed';
      } else if (stepId === 2) {
        return 'Completed';
      } else if (stepId === 3) {
        // Step 3 shows the actual decline status
        return 'Invoice Declined';
      } else {
        // Steps 4 and beyond are cancelled as a result of the decline
        return 'Cancelled';
      }
    }
    
    // Handle payment failed scenario - steps 1-5 should remain completed  
    if (isPaymentFailed && stepId) {
      if (stepId === 1) {
        return 'Completed';
      } else if (stepId <= 5 && completedStatuses.includes(currentStatus)) {
        return 'Completed';
      } else if (stepId > 5) {
        // Steps 6 and beyond show payment failed status
        return 'Payment Rejected';
      }
    }
    
    // Handle other cancellation scenarios (original logic)
    if (isCancelled) {
      if (currentStatus === PAYMENT_STATUS.FAILED) return 'Payment Rejected';
      if (currentStatus === ORDER_STATUS.CANCELLED) return 'Order Cancelled';
      if (currentStatus === ORDER_STATUS.INVOICE_DECLINED) return 'Invoice Declined';
      return 'Cancelled';
    }
    if (declinedStatus && currentStatus === declinedStatus) {
      if (declinedStatus === PAYMENT_STATUS.FAILED) return 'Payment Rejected';
      return 'Declined';
    }
    if (completedStatuses.includes(currentStatus)) return 'Completed';
    
    const stepsBefore = getStepsBeforeThisOne(completedStatuses);
    if (stepsBefore.includes(currentStatus)) return 'In Progress';
    
    return 'Pending';
  }

  // Helper to determine which statuses come before this step
  function getStepsBeforeThisOne(completedStatuses: string[]): string[] {
    if (completedStatuses.includes(ORDER_STATUS.INVOICE_SENT)) return [ORDER_STATUS.PENDING_ADMIN_REVIEW];
    if (completedStatuses.includes(ORDER_STATUS.INVOICE_ACCEPTED)) return [ORDER_STATUS.INVOICE_SENT];
    if (completedStatuses.includes(ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED)) return [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING];
    if (completedStatuses.includes(ORDER_STATUS.PAYMENT_SUBMITTED)) return [ORDER_STATUS.PAYPAL_CREDENTIALS_SHARED, ORDER_STATUS.PAYMENT_PENDING];
    if (completedStatuses.includes(ORDER_STATUS.PAYMENT_VERIFIED)) return [ORDER_STATUS.PAYMENT_SUBMITTED];
    if (completedStatuses.includes(ORDER_STATUS.CONFIRMED)) return [ORDER_STATUS.PAYMENT_VERIFIED];
    return [];
  }

  const getStatusColor = (status: 'completed' | 'current' | 'pending' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return 'text-green-600 bg-green-100 border-green-200 dark:bg-green-900/20 dark:border-green-800';
      case 'current':
        return 'text-yellow-600 bg-yellow-100 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800';
      case 'cancelled':
        return 'text-red-600 bg-red-100 border-red-200 dark:bg-red-900/20 dark:border-red-800';
      default:
        return 'text-gray-500 bg-gray-100 border-gray-200 dark:bg-gray-800 dark:border-gray-700';
    }
  };

  const getStatusIcon = (status: 'completed' | 'current' | 'pending' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'current':
        return <Clock className="h-5 w-5 text-yellow-600" />;
      case 'cancelled':
        return <XCircle className="h-5 w-5 text-red-600" />;
      default:
        return <Clock className="h-5 w-5 text-gray-400" />;
    }
  };

  const trackingSteps = getTrackingSteps(orderStatus);
  const completedSteps = trackingSteps.filter(step => step.status === 'completed').length;
  const progressPercentage = (completedSteps / trackingSteps.length) * 100;

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Package className="h-5 w-5" />
          Order Progress Tracking
        </CardTitle>
        <div className="space-y-2">
          <div className="flex items-center justify-between text-sm">
            <span className="text-muted-foreground">Progress: {completedSteps} of {trackingSteps.length} steps completed</span>
            <span className="font-medium">{Math.round(progressPercentage)}%</span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {trackingSteps.map((step, index) => (
            <div key={step.id} className="relative">
              {/* Timeline line */}
              {index < trackingSteps.length - 1 && (
                <div 
                  className={`absolute left-5 top-11 w-0.5 h-5 ${
                    step.status === 'completed' ? 'bg-green-300' : 
                    step.status === 'current' ? 'bg-yellow-300' : 
                    step.status === 'cancelled' ? 'bg-red-300' : 'bg-gray-200'
                  }`} 
                  style={{ left: '22px' }}
                />
              )}
              
              <div className="flex items-start gap-4">
                {/* Status icon */}
                <div className={`flex-shrink-0 w-11 h-11 rounded-full border-2 flex items-center justify-center ${getStatusColor(step.status)}`}>
                  {getStatusIcon(step.status)}
                </div>
                
                {/* Content */}
                <div className="flex-1 min-w-0 pb-2">
                  <div className="flex items-center justify-between">
                    <h4 className={`font-semibold text-sm ${
                      step.status === 'cancelled' ? 'text-red-600 dark:text-red-400' : 
                      step.status === 'completed' ? 'text-green-600 dark:text-green-400' : 
                      step.status === 'current' ? 'text-yellow-600 dark:text-yellow-400' :
                      'text-foreground'
                    }`}>
                      {step.title}
                    </h4>
                    <Badge 
                      variant={
                        step.status === 'completed' ? 'default' : 
                        step.status === 'cancelled' ? 'destructive' : 
                        step.status === 'current' ? 'secondary' : 'outline'
                      }
                      className="text-xs"
                    >
                      {step.statusText}
                    </Badge>
                  </div>
                  {step.description && (
                    <p className="text-sm text-muted-foreground mt-1">
                      {step.description}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Mobile-friendly summary */}
        <div className="mt-6 p-4 bg-muted rounded-lg md:hidden">
          <h5 className="font-medium mb-2">Order Status Summary</h5>
          <p className="text-sm text-muted-foreground">
            {orderStatus === ORDER_STATUS.CANCELLED
              ? "This order has been cancelled."
              : orderStatus === ORDER_STATUS.INVOICE_DECLINED
              ? "The invoice for this order was declined."
              : orderStatus === PAYMENT_STATUS.FAILED
              ? "The payment for this order was rejected."
              : orderStatus === ORDER_STATUS.CONFIRMED
              ? "Your order has been confirmed and will be processed."
              : orderStatus === ORDER_STATUS.SHIPPED
              ? "Your order has been shipped."
              : orderStatus === ORDER_STATUS.DELIVERED
              ? "Your order has been delivered."
              : "Your order is being processed. Check back for updates."
            }
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default TrackOrderTimeline;