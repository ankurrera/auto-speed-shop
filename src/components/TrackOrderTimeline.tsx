import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  CheckCircle,
  Clock,
  FileText,
  CreditCard,
  AlertCircle,
  Package,
  DollarSign,
  XCircle
} from "lucide-react";
import { ORDER_STATUS, PAYMENT_STATUS } from "@/types/order";

interface TrackingStep {
  id: number;
  title: string;
  icon: React.ReactNode;
  status: 'completed' | 'current' | 'pending' | 'cancelled';
  statusText: string;
}

interface TrackOrderTimelineProps {
  orderStatus: string;
  className?: string;
}

const TrackOrderTimeline: React.FC<TrackOrderTimelineProps> = ({ 
  orderStatus, 
  className = "" 
}) => {
  // Map order status to tracking steps
  const getTrackingSteps = (status: string): TrackingStep[] => {
    // Add payment failure status to cancellation check
    const isCancelled = status === ORDER_STATUS.CANCELLED || 
                       status === ORDER_STATUS.INVOICE_DECLINED ||
                       status === PAYMENT_STATUS.FAILED;
    const isCompleted = status === ORDER_STATUS.CONFIRMED || 
                       status === ORDER_STATUS.SHIPPED || 
                       status === ORDER_STATUS.DELIVERED;
    
    const steps: TrackingStep[] = [
      {
        id: 1,
        title: "Checkout Request Placed",
        icon: <Package className="h-5 w-5" />,
        status: 'completed',
        statusText: 'Completed'
      },
      {
        id: 2,
        title: "Invoice Generated by Admin",
        icon: <FileText className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.INVOICE_SENT, ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled),
        statusText: getStepStatusText(status, [ORDER_STATUS.INVOICE_SENT, ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled)
      },
      {
        id: 3,
        title: "User Decision (Accepted / Declined)",
        icon: <AlertCircle className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled, ORDER_STATUS.INVOICE_DECLINED),
        statusText: getStepStatusText(status, [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled, ORDER_STATUS.INVOICE_DECLINED)
      },
      {
        id: 4,
        title: "PayPal Credentials Shared",
        icon: <DollarSign className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled),
        statusText: getStepStatusText(status, [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING, ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled)
      },
      {
        id: 5,
        title: "User Payment Submitted",
        icon: <CreditCard className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled),
        statusText: getStepStatusText(status, [ORDER_STATUS.PAYMENT_SUBMITTED, ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled)
      },
      {
        id: 6,
        title: "Admin Payment Verification",
        icon: <CheckCircle className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled, PAYMENT_STATUS.FAILED),
        statusText: getStepStatusText(status, [ORDER_STATUS.PAYMENT_VERIFIED, ORDER_STATUS.CONFIRMED], isCancelled, PAYMENT_STATUS.FAILED)
      },
      {
        id: 7,
        title: "Order Confirmed",
        icon: <CheckCircle className="h-5 w-5" />,
        status: getStepStatus(status, [ORDER_STATUS.CONFIRMED], isCancelled),
        statusText: getStepStatusText(status, [ORDER_STATUS.CONFIRMED], isCancelled)
      }
    ];

    return steps;
  };

  // Helper function to determine step status
  function getStepStatus(
    currentStatus: string, 
    completedStatuses: string[], 
    isCancelled: boolean, 
    declinedStatus?: string
  ): 'completed' | 'current' | 'pending' | 'cancelled' {
    if (isCancelled) return 'cancelled';
    if (declinedStatus && currentStatus === declinedStatus) return 'cancelled';
    if (completedStatuses.includes(currentStatus)) return 'completed';
    
    // Check if this step should be current (one step before completed)
    const stepsBefore = getStepsBeforeThisOne(completedStatuses);
    if (stepsBefore.includes(currentStatus)) return 'current';
    
    return 'pending';
  }

  // Helper function to get status text
  function getStepStatusText(
    currentStatus: string, 
    completedStatuses: string[], 
    isCancelled: boolean, 
    declinedStatus?: string
  ): string {
    if (isCancelled) {
      if (currentStatus === PAYMENT_STATUS.FAILED) return 'Payment Rejected';
      if (currentStatus === ORDER_STATUS.CANCELLED) return 'Order Cancelled';
      if (currentStatus === ORDER_STATUS.INVOICE_DECLINED) return 'Invoice Declined';
      return 'Cancelled';
    }
    if (declinedStatus && currentStatus === declinedStatus) {
      if (declinedStatus === PAYMENT_STATUS.FAILED) return 'Payment Rejected';
      return 'Declined';
    }
    if (completedStatuses.includes(currentStatus)) return 'Completed';
    
    const stepsBefore = getStepsBeforeThisOne(completedStatuses);
    if (stepsBefore.includes(currentStatus)) return 'In Progress';
    
    return 'Pending';
  }

  // Helper to determine which statuses come before this step
  function getStepsBeforeThisOne(completedStatuses: string[]): string[] {
    if (completedStatuses.includes(ORDER_STATUS.INVOICE_SENT)) return [ORDER_STATUS.PENDING_ADMIN_REVIEW];
    if (completedStatuses.includes(ORDER_STATUS.INVOICE_ACCEPTED)) return [ORDER_STATUS.INVOICE_SENT];
    if (completedStatuses.includes(ORDER_STATUS.PAYMENT_SUBMITTED)) return [ORDER_STATUS.INVOICE_ACCEPTED, ORDER_STATUS.PAYMENT_PENDING];
    if (completedStatuses.includes(ORDER_STATUS.PAYMENT_VERIFIED)) return [ORDER_STATUS.PAYMENT_SUBMITTED];
    if (completedStatuses.includes(ORDER_STATUS.CONFIRMED)) return [ORDER_STATUS.PAYMENT_VERIFIED];
    return [];
  }

  const getStatusColor = (status: 'completed' | 'current' | 'pending' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return 'text-green-600 bg-green-100 border-green-200';
      case 'current':
        return 'text-blue-600 bg-blue-100 border-blue-200';
      case 'cancelled':
        return 'text-red-600 bg-red-100 border-red-200';
      default:
        return 'text-gray-500 bg-gray-100 border-gray-200';
    }
  };

  const getStatusIcon = (status: 'completed' | 'current' | 'pending' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'current':
        return <Clock className="h-5 w-5 text-blue-600" />;
      case 'cancelled':
        return <XCircle className="h-5 w-5 text-red-600" />;
      default:
        return <Clock className="h-5 w-5 text-gray-400" />;
    }
  };

  const trackingSteps = getTrackingSteps(orderStatus);

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Package className="h-5 w-5" />
          Track Order Progress
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {trackingSteps.map((step, index) => (
            <div key={step.id} className="relative">
              {/* Timeline line */}
              {index < trackingSteps.length - 1 && (
                <div className="absolute left-5 top-11 w-0.5 h-5 bg-gray-200" style={{ left: '22px' }}></div>
              )}
              
              <div className="flex items-center gap-4">
                {/* Status icon */}
                <div className={`flex-shrink-0 w-11 h-11 rounded-full border-2 flex items-center justify-center ${getStatusColor(step.status)}`}>
                  {getStatusIcon(step.status)}
                </div>
                
                {/* Content */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <h4 className={`font-semibold text-sm ${step.status === 'cancelled' ? 'text-red-600' : step.status === 'completed' ? 'text-green-600' : 'text-foreground'}`}>
                      {step.title}
                    </h4>
                    <Badge 
                      variant={step.status === 'completed' ? 'default' : step.status === 'cancelled' ? 'destructive' : 'secondary'}
                      className="text-xs"
                    >
                      {step.statusText}
                    </Badge>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Mobile-friendly summary */}
        <div className="mt-6 p-4 bg-muted rounded-lg md:hidden">
          <h5 className="font-medium mb-2">Order Status Summary</h5>
          <p className="text-sm text-muted-foreground">
            {orderStatus === ORDER_STATUS.CANCELLED
              ? "This order has been cancelled."
              : orderStatus === ORDER_STATUS.INVOICE_DECLINED
              ? "The invoice for this order was declined."
              : orderStatus === PAYMENT_STATUS.FAILED
              ? "The payment for this order was rejected."
              : orderStatus === ORDER_STATUS.CONFIRMED
              ? "Your order has been confirmed and will be processed."
              : "Your order is being processed. Check back for updates."
            }
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default TrackOrderTimeline;