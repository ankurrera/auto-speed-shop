import { cn } from "@/lib/utils";
import { CheckCircle, Clock, XCircle, CreditCard, FileText, DollarSign, Package, Truck } from "lucide-react";

interface TrackingStep {
  id: string;
  title: string;
  description: string;
  icon: React.ComponentType<any>;
  status: 'pending' | 'completed' | 'cancelled';
}

interface OrderProgressTrackerProps {
  currentStatus: string;
  paymentStatus?: string;
  className?: string;
}

const OrderProgressTracker = ({ currentStatus, paymentStatus, className }: OrderProgressTrackerProps) => {
  
  // Map order statuses to the 7 required steps
  const getStepStatus = (stepId: string): 'pending' | 'completed' | 'cancelled' => {
    if (currentStatus === 'cancelled' || currentStatus === 'invoice_declined') {
      // If cancelled, determine at which step the cancellation occurred
      const stepOrder = ['checkout_request', 'invoice_generated', 'user_decision', 'paypal_shared', 'payment_submitted', 'verification', 'confirmed'];
      const currentStepIndex = getStepIndex(currentStatus);
      const stepIndex = stepOrder.indexOf(stepId);
      
      if (stepIndex <= currentStepIndex) {
        return stepIndex === currentStepIndex ? 'cancelled' : 'completed';
      }
      return 'cancelled';
    }

    switch (stepId) {
      case 'checkout_request':
        return 'completed'; // Always completed if order exists
      
      case 'invoice_generated':
        return ['invoice_sent', 'invoice_accepted', 'paypal_shared', 'payment_submitted', 'payment_verified', 'confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      case 'user_decision':
        if (currentStatus === 'invoice_declined') return 'cancelled';
        return ['invoice_accepted', 'paypal_shared', 'payment_submitted', 'payment_verified', 'confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      case 'paypal_shared':
        return ['paypal_shared', 'payment_submitted', 'payment_verified', 'confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      case 'payment_submitted':
        return ['payment_submitted', 'payment_verified', 'confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      case 'verification':
        return ['payment_verified', 'confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      case 'confirmed':
        return ['confirmed', 'shipped', 'delivered'].includes(currentStatus) ? 'completed' : 'pending';
      
      default:
        return 'pending';
    }
  };

  const getStepIndex = (status: string): number => {
    const statusToStepMap: { [key: string]: number } = {
      'pending_admin_review': 0,
      'invoice_sent': 1,
      'invoice_accepted': 2,
      'invoice_declined': 2,
      'paypal_shared': 3,
      'payment_submitted': 4,
      'payment_verified': 5,
      'confirmed': 6,
      'cancelled': -1
    };
    return statusToStepMap[status] ?? 0;
  };

  const steps: TrackingStep[] = [
    {
      id: 'checkout_request',
      title: 'Checkout Request Placed',
      description: 'Your order request has been submitted',
      icon: FileText,
      status: getStepStatus('checkout_request')
    },
    {
      id: 'invoice_generated',
      title: 'Invoice Generated by Admin',
      description: 'Admin has reviewed and created your invoice',
      icon: FileText,
      status: getStepStatus('invoice_generated')
    },
    {
      id: 'user_decision',
      title: 'User Decision',
      description: 'Customer accepts or declines the invoice',
      icon: CheckCircle,
      status: getStepStatus('user_decision')
    },
    {
      id: 'paypal_shared',
      title: 'PayPal Credentials Shared',
      description: 'Payment instructions sent to customer',
      icon: CreditCard,
      status: getStepStatus('paypal_shared')
    },
    {
      id: 'payment_submitted',
      title: 'User Payment Submitted',
      description: 'Customer has submitted payment proof',
      icon: DollarSign,
      status: getStepStatus('payment_submitted')
    },
    {
      id: 'verification',
      title: 'Admin Verification',
      description: 'Admin verifies the payment',
      icon: CheckCircle,
      status: getStepStatus('verification')
    },
    {
      id: 'confirmed',
      title: 'Order Accepted / Confirmed',
      description: 'Order confirmed and ready for fulfillment',
      icon: Package,
      status: getStepStatus('confirmed')
    }
  ];

  const getStatusIcon = (status: 'pending' | 'completed' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'cancelled':
        return <XCircle className="w-5 h-5 text-red-500" />;
      default:
        return <Clock className="w-5 h-5 text-gray-400" />;
    }
  };

  const getStatusColor = (status: 'pending' | 'completed' | 'cancelled') => {
    switch (status) {
      case 'completed':
        return 'text-green-600 border-green-200 bg-green-50';
      case 'cancelled':
        return 'text-red-600 border-red-200 bg-red-50';
      default:
        return 'text-gray-500 border-gray-200 bg-gray-50';
    }
  };

  const getConnectorColor = (currentIndex: number, steps: TrackingStep[]) => {
    if (currentIndex >= steps.length - 1) return '';
    
    const currentStep = steps[currentIndex];
    const nextStep = steps[currentIndex + 1];
    
    if (currentStep.status === 'completed' && nextStep.status === 'completed') {
      return 'bg-green-300';
    } else if (currentStep.status === 'cancelled' || nextStep.status === 'cancelled') {
      return 'bg-red-300';
    }
    return 'bg-gray-300';
  };

  return (
    <div className={cn("w-full max-w-4xl mx-auto", className)}>
      <div className="hidden md:block">
        {/* Desktop horizontal layout */}
        <div className="flex items-center justify-between">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center flex-1">
              <div className="flex flex-col items-center">
                <div className={cn(
                  "w-12 h-12 rounded-full border-2 flex items-center justify-center mb-2",
                  getStatusColor(step.status)
                )}>
                  {getStatusIcon(step.status)}
                </div>
                <div className="text-center max-w-32">
                  <p className={cn(
                    "text-sm font-medium mb-1",
                    step.status === 'completed' ? 'text-green-600' :
                    step.status === 'cancelled' ? 'text-red-600' : 'text-gray-500'
                  )}>
                    {step.title}
                  </p>
                  <p className="text-xs text-gray-500">
                    {step.description}
                  </p>
                </div>
              </div>
              {index < steps.length - 1 && (
                <div className={cn(
                  "flex-1 h-0.5 mx-4",
                  getConnectorColor(index, steps)
                )} />
              )}
            </div>
          ))}
        </div>
      </div>

      <div className="md:hidden">
        {/* Mobile vertical layout */}
        <div className="space-y-4">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-start">
              <div className="flex flex-col items-center mr-4">
                <div className={cn(
                  "w-10 h-10 rounded-full border-2 flex items-center justify-center",
                  getStatusColor(step.status)
                )}>
                  {getStatusIcon(step.status)}
                </div>
                {index < steps.length - 1 && (
                  <div className={cn(
                    "w-0.5 h-8 mt-2",
                    getConnectorColor(index, steps)
                  )} />
                )}
              </div>
              <div className="flex-1 pt-2">
                <h4 className={cn(
                  "font-medium mb-1",
                  step.status === 'completed' ? 'text-green-600' :
                  step.status === 'cancelled' ? 'text-red-600' : 'text-gray-500'
                )}>
                  {step.title}
                </h4>
                <p className="text-sm text-gray-500">
                  {step.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default OrderProgressTracker;