// Order Progress Tracking Types
import { z } from "zod";

// Status types for order progress steps
export const PROGRESS_STATUS = {
  PENDING: 'pending',
  COMPLETED: 'completed',
  CANCELED: 'canceled'
} as const;

export type ProgressStatus = typeof PROGRESS_STATUS[keyof typeof PROGRESS_STATUS];

// Step configuration interface
export interface OrderProgressStepConfig {
  stepNumber: number;
  title: string;
  description: string;
  icon?: string;
}

// Database representation of an order progress step
export interface OrderProgressStep {
  id: string;
  order_id: string;
  step_number: number;
  title: string;
  description: string | null;
  status: ProgressStatus;
  created_at: string;
  updated_at: string;
  completed_at: string | null;
  canceled_at: string | null;
}

// Frontend display representation
export interface OrderProgressStepDisplay extends OrderProgressStep {
  icon: React.ReactNode;
  isActive: boolean;
  statusText: string;
  statusColor: string;
}

// Complete order progress tracking data
export interface OrderProgressTracking {
  order_id: string;
  steps: OrderProgressStep[];
  overall_status: 'in_progress' | 'completed' | 'canceled';
  total_steps: number;
  completed_steps: number;
  progress_percentage: number;
  last_updated: string;
}

// Request/response types for API
export interface UpdateProgressStepRequest {
  order_id: string;
  step_number: number;
  status: ProgressStatus;
}

export interface InitializeProgressRequest {
  order_id: string;
}

// Validation schemas using Zod
export const ProgressStatusSchema = z.enum([
  PROGRESS_STATUS.PENDING,
  PROGRESS_STATUS.COMPLETED,
  PROGRESS_STATUS.CANCELED
]);

export const OrderProgressStepSchema = z.object({
  id: z.string().uuid(),
  order_id: z.string().uuid(),
  step_number: z.number().min(1).max(7),
  title: z.string().min(1),
  description: z.string().nullable(),
  status: ProgressStatusSchema,
  created_at: z.string(),
  updated_at: z.string(),
  completed_at: z.string().nullable(),
  canceled_at: z.string().nullable()
});

export const UpdateProgressStepRequestSchema = z.object({
  order_id: z.string().uuid(),
  step_number: z.number().min(1).max(7),
  status: ProgressStatusSchema
});

export const InitializeProgressRequestSchema = z.object({
  order_id: z.string().uuid()
});

// Predefined step configurations (matching the 7-step requirements)
export const ORDER_PROGRESS_STEP_CONFIGS: OrderProgressStepConfig[] = [
  {
    stepNumber: 1,
    title: 'Checkout Request Placed',
    description: 'User places an order. Mark status as Completed immediately after placing.',
  },
  {
    stepNumber: 2,
    title: 'Invoice Generated by Admin',
    description: 'Admin generates a custom invoice. Status starts as Pending then Completed when invoice is generated.',
  },
  {
    stepNumber: 3,
    title: 'User Decision (Accepted / Declined)',
    description: 'User reviews the invoice and accepts or declines it. Status starts as Pending until user acts. If user declines, automatically mark Steps 3–7 as Canceled.',
  },
  {
    stepNumber: 4,
    title: 'PayPal Credentials Shared',
    description: 'Admin shares secure payment details/instructions. Status starts as Pending then Completed once credentials sent. Skip if user declined invoice.',
  },
  {
    stepNumber: 5,
    title: 'User Payment Submitted',
    description: 'User submits payment. Status starts as Pending then Completed when payment submitted. Skip if user declined invoice.',
  },
  {
    stepNumber: 6,
    title: 'Admin Payment Verification',
    description: 'Admin verifies the payment details. Status starts as Pending then Completed when verified. If declined by admin, automatically mark Steps 6–7 as Canceled.',
  },
  {
    stepNumber: 7,
    title: 'Order Confirmed',
    description: 'Once payment is verified, mark this step as Completed. Skip if previous steps canceled.',
  }
];

// Utility type guards
export const isProgressStatus = (status: string): status is ProgressStatus => {
  return Object.values(PROGRESS_STATUS).includes(status as ProgressStatus);
};

// Real-time update types for subscriptions
export interface OrderProgressUpdate {
  order_id: string;
  step_number: number;
  old_status: ProgressStatus;
  new_status: ProgressStatus;
  updated_at: string;
}

// Error types
export interface OrderProgressError {
  code: string;
  message: string;
  details?: any;
}

// Status mapping helpers
export const getStatusDisplayText = (status: ProgressStatus): string => {
  switch (status) {
    case PROGRESS_STATUS.PENDING:
      return 'Pending';
    case PROGRESS_STATUS.COMPLETED:
      return 'Completed';
    case PROGRESS_STATUS.CANCELED:
      return 'Canceled';
    default:
      return status;
  }
};

export const getStatusColor = (status: ProgressStatus): string => {
  switch (status) {
    case PROGRESS_STATUS.PENDING:
      return 'text-yellow-600 bg-yellow-100 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800';
    case PROGRESS_STATUS.COMPLETED:
      return 'text-green-600 bg-green-100 border-green-200 dark:bg-green-900/20 dark:border-green-800';
    case PROGRESS_STATUS.CANCELED:
      return 'text-red-600 bg-red-100 border-red-200 dark:bg-red-900/20 dark:border-red-800';
    default:
      return 'text-gray-500 bg-gray-100 border-gray-200 dark:bg-gray-800 dark:border-gray-700';
  }
};

// Business logic helpers
export const calculateProgressPercentage = (steps: OrderProgressStep[]): number => {
  const completedSteps = steps.filter(step => step.status === PROGRESS_STATUS.COMPLETED);
  return Math.round((completedSteps.length / steps.length) * 100);
};

export const getOverallStatus = (steps: OrderProgressStep[]): 'in_progress' | 'completed' | 'canceled' => {
  const allCompleted = steps.every(step => 
    step.status === PROGRESS_STATUS.COMPLETED || step.status === PROGRESS_STATUS.CANCELED
  );
  const hasCompleted = steps.some(step => step.status === PROGRESS_STATUS.COMPLETED);
  const allCanceled = steps.every(step => step.status === PROGRESS_STATUS.CANCELED);
  
  if (allCanceled) return 'canceled';
  if (allCompleted && hasCompleted) return 'completed';
  return 'in_progress';
};

export const getCurrentStep = (steps: OrderProgressStep[]): OrderProgressStep | null => {
  // Find the first pending step
  const pendingSteps = steps
    .filter(step => step.status === PROGRESS_STATUS.PENDING)
    .sort((a, b) => a.step_number - b.step_number);
  
  return pendingSteps.length > 0 ? pendingSteps[0] : null;
};