-- Create order progress tracking system with 7 predefined steps
-- This extends the existing order tracking functionality

-- Create order_progress_steps table for the 7-step tracking system
CREATE TABLE IF NOT EXISTS order_progress_steps (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    step_number INTEGER NOT NULL CHECK (step_number >= 1 AND step_number <= 7),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'canceled')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    completed_at TIMESTAMP WITH TIME ZONE,
    canceled_at TIMESTAMP WITH TIME ZONE,
    UNIQUE(order_id, step_number)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_order_progress_steps_order_id ON order_progress_steps(order_id);
CREATE INDEX IF NOT EXISTS idx_order_progress_steps_status ON order_progress_steps(status);
CREATE INDEX IF NOT EXISTS idx_order_progress_steps_step_number ON order_progress_steps(step_number);

-- Enable RLS
ALTER TABLE order_progress_steps ENABLE ROW LEVEL SECURITY;

-- RLS policies for order_progress_steps
-- Users can view their own order progress
CREATE POLICY "Users can view their order progress" ON order_progress_steps
FOR SELECT USING (
    EXISTS (
        SELECT 1 FROM orders 
        WHERE orders.id = order_progress_steps.order_id 
        AND orders.user_id = auth.uid()
    )
);

-- Admins can view and modify all order progress
CREATE POLICY "Admins can manage all order progress" ON order_progress_steps
FOR ALL USING (
    EXISTS (
        SELECT 1 FROM profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.is_admin = true
    )
);

-- Function to initialize order progress steps when an order is created
CREATE OR REPLACE FUNCTION initialize_order_progress_steps(order_id UUID)
RETURNS void AS $$
BEGIN
    -- Insert the 7 predefined steps for the order
    INSERT INTO order_progress_steps (order_id, step_number, title, description, status) VALUES
    (order_id, 1, 'Checkout Request Placed', 'User places an order', 'completed'),
    (order_id, 2, 'Invoice Generated by Admin', 'Admin generates a custom invoice', 'pending'),
    (order_id, 3, 'User Decision (Accepted / Declined)', 'User reviews the invoice and accepts or declines it', 'pending'),
    (order_id, 4, 'PayPal Credentials Shared', 'Admin shares secure payment details/instructions', 'pending'),
    (order_id, 5, 'User Payment Submitted', 'User submits payment', 'pending'),
    (order_id, 6, 'Admin Payment Verification', 'Admin verifies the payment details', 'pending'),
    (order_id, 7, 'Order Confirmed', 'Once payment is verified, order is confirmed', 'pending');
    
    -- Update step 1 completion timestamp
    UPDATE order_progress_steps 
    SET completed_at = now() 
    WHERE order_progress_steps.order_id = initialize_order_progress_steps.order_id AND step_number = 1;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to update order progress step status
CREATE OR REPLACE FUNCTION update_order_progress_step(
    p_order_id UUID,
    p_step_number INTEGER,
    p_status VARCHAR(20)
)
RETURNS void AS $$
BEGIN
    -- Update the step status
    UPDATE order_progress_steps 
    SET 
        status = p_status,
        updated_at = now(),
        completed_at = CASE WHEN p_status = 'completed' THEN now() ELSE completed_at END,
        canceled_at = CASE WHEN p_status = 'canceled' THEN now() ELSE canceled_at END
    WHERE order_progress_steps.order_id = p_order_id AND step_number = p_step_number;
    
    -- Handle conditional logic for cancellations
    IF p_step_number = 3 AND p_status = 'canceled' THEN
        -- If user declines invoice (step 3), cancel steps 4-7
        UPDATE order_progress_steps 
        SET 
            status = 'canceled',
            updated_at = now(),
            canceled_at = now()
        WHERE order_progress_steps.order_id = p_order_id AND step_number BETWEEN 4 AND 7;
    END IF;
    
    IF p_step_number = 6 AND p_status = 'canceled' THEN
        -- If admin declines payment (step 6), cancel step 7
        UPDATE order_progress_steps 
        SET 
            status = 'canceled',
            updated_at = now(),
            canceled_at = now()
        WHERE order_progress_steps.order_id = p_order_id AND step_number = 7;
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to sync order progress with existing order status
CREATE OR REPLACE FUNCTION sync_order_progress_with_status(p_order_id UUID)
RETURNS void AS $$
DECLARE
    order_record orders%ROWTYPE;
BEGIN
    -- Get the order record
    SELECT * INTO order_record FROM orders WHERE id = p_order_id;
    
    IF NOT FOUND THEN
        RETURN;
    END IF;
    
    -- Sync based on current order status
    CASE order_record.status
        WHEN 'pending_admin_review' THEN
            -- Step 1 complete, step 2 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            
        WHEN 'invoice_sent' THEN
            -- Steps 1-2 complete, step 3 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            
        WHEN 'invoice_accepted' THEN
            -- Steps 1-3 complete, step 4 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            
        WHEN 'invoice_declined' THEN
            -- Steps 1-2 complete, step 3 canceled, steps 4-7 canceled
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'canceled');
            
        WHEN 'paypal_credentials_shared' THEN
            -- Steps 1-4 complete, step 5 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            PERFORM update_order_progress_step(p_order_id, 4, 'completed');
            
        WHEN 'payment_pending' THEN
            -- Steps 1-4 complete, step 5 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            PERFORM update_order_progress_step(p_order_id, 4, 'completed');
            
        WHEN 'payment_submitted' THEN
            -- Steps 1-5 complete, step 6 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            PERFORM update_order_progress_step(p_order_id, 4, 'completed');
            PERFORM update_order_progress_step(p_order_id, 5, 'completed');
            
        WHEN 'payment_verified' THEN
            -- Steps 1-6 complete, step 7 pending
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            PERFORM update_order_progress_step(p_order_id, 4, 'completed');
            PERFORM update_order_progress_step(p_order_id, 5, 'completed');
            PERFORM update_order_progress_step(p_order_id, 6, 'completed');
            
        WHEN 'confirmed' THEN
            -- All steps complete
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
            PERFORM update_order_progress_step(p_order_id, 2, 'completed');
            PERFORM update_order_progress_step(p_order_id, 3, 'completed');
            PERFORM update_order_progress_step(p_order_id, 4, 'completed');
            PERFORM update_order_progress_step(p_order_id, 5, 'completed');
            PERFORM update_order_progress_step(p_order_id, 6, 'completed');
            PERFORM update_order_progress_step(p_order_id, 7, 'completed');
            
        WHEN 'cancelled' THEN
            -- Cancel all remaining steps
            UPDATE order_progress_steps 
            SET status = 'canceled', updated_at = now(), canceled_at = now()
            WHERE order_progress_steps.order_id = p_order_id AND status = 'pending';
            
        ELSE
            -- For other statuses, just ensure step 1 is complete
            PERFORM update_order_progress_step(p_order_id, 1, 'completed');
    END CASE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically sync progress when order status changes
CREATE OR REPLACE FUNCTION trigger_sync_order_progress()
RETURNS trigger AS $$
BEGIN
    -- Initialize progress steps if they don't exist
    IF NOT EXISTS (SELECT 1 FROM order_progress_steps WHERE order_progress_steps.order_id = NEW.id) THEN
        PERFORM initialize_order_progress_steps(NEW.id);
    END IF;
    
    -- Sync progress with current status
    PERFORM sync_order_progress_with_status(NEW.id);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for order status updates
DROP TRIGGER IF EXISTS sync_order_progress_trigger ON orders;
CREATE TRIGGER sync_order_progress_trigger
    AFTER INSERT OR UPDATE OF status
    ON orders
    FOR EACH ROW
    EXECUTE FUNCTION trigger_sync_order_progress();